<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on It&#39;s Ronald</title>
    <link>http://itsronald.com/categories/kotlin/</link>
    <description>Recent content in Kotlin on It&#39;s Ronald</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2016 19:26:34 -0700</lastBuildDate>
    
	<atom:link href="http://itsronald.com/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin&#39;s Computed Properties Are Just Methods</title>
      <link>http://itsronald.com/blog/2016/06/kotlin-get-property-vs-method/</link>
      <pubDate>Thu, 30 Jun 2016 19:26:34 -0700</pubDate>
      
      <guid>http://itsronald.com/blog/2016/06/kotlin-get-property-vs-method/</guid>
      <description>Note: this post assumes familiarity with Java language features and conventions. RxJava familiarity is useful, but not required.
I was curious today about the relationship of Kotlin&amp;rsquo;s computed properties and methods. They do very similar things, so are they implemented similarly? (Spoiler: Yes. Yes they are.) Somehow, however, I also ended up drawing some conclusions on the semantics of reactive Observable generation. Kotlin&amp;rsquo;s computed properties can be a powerful tool for expressing your program&amp;rsquo;s intent with Observables, but you should think twice before using them for that purpose.</description>
    </item>
    
    <item>
      <title>Lessons Learned: Kotlin &#43; Dagger2</title>
      <link>http://itsronald.com/blog/2016/06/lessons-learned-kotlin-dagger2/</link>
      <pubDate>Tue, 14 Jun 2016 22:48:04 -0700</pubDate>
      
      <guid>http://itsronald.com/blog/2016/06/lessons-learned-kotlin-dagger2/</guid>
      <description>Update 2016-10-05 This article has been updated to reflect some changes to tooling that fixes some of the problems mentioned below.
Living Life on the &amp;ldquo;Edge&amp;rdquo; I&amp;rsquo;m currently building an Android app to remind me to take healthy breaks from starting at computer screens. For extra funsies, it&amp;rsquo;s built on the cutting edge of current fashionable Android technologies. Of particular note today, we have:
 MVP architecture using Dagger 2 for dependency injection, and Kotlin, the JVM language by JetBrains.</description>
    </item>
    
  </channel>
</rss>